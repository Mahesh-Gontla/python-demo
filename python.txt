Python

Programming Language

Applications of Python PL
>> Web Development
>> Game Development
>> AI & ML
>> Data Science & Data Visualization
>> Desktop GUI
>> Web Scrapping Applications
>> Business Applications
>> Audio & Video Applications

Variables in Python -- the variable is to store the data
>> # for commenting
>> age = 18 -- Here age is variable and 18 is the value
>> A variable name can be started with lowercase letters a-z and uppercase letters A-Z  & _
>> Eg:- one1, One2, _one
>> age = 18, Age = 18, Name = , _name
>> age = 18
>> print(age)

Print & Input in Python
>> Input -- it takes the input data from the user
>> Output -- it displays the output data to the user
>> name = ("Believer-01") #declaration of variable
>> print("Hello World!")
>> print(name)
>>> Input taking in python
>> name = input() or input('Enter your name:')
>> print("Hello", name, "Welcome to our Channel")  

Data Types in Python -- A variable which type of data has to be stored - datatype
>> Numbers -- integers
>> English Words -- strings
>> Bool -- True or False
Numeric types:
>> int: Integer type, e.g., 5, -10, 1000.
>> float: Floating-point type, e.g., 3.14, -0.5, 2.0.
Sequence types:
>> str: String type, sequence of characters e.g., "hello", 'world', "42".
>> list: A mutable ordered collection of elements, e.g., [1, 2, 3], ['a', 'b', 'c'].
>> tuple: An immutable ordered collection of elements, e.g., (1, 2, 3), ('x', 'y', 'z').
Mapping type:
>> dict: A mutable collection that maps keys to values, e.g., {'name': 'John', 'age': 30}.
Set types:
>> set: An unordered collection of unique elements, e.g., {1, 2, 3}, {'apple', 'banana', 'orange'}.
frozen set: An immutable version of a set, e.g., frozenset({1, 2, 3}).
Boolean type:
>> bool: Represents a boolean value, either True or False.
NoneType:
>> None: Represents the absence of a value or a null value.
>>> int, string, bool -- primitive datatypes
>>> set, list, tuple -- group of datatypes -- array type datatypes 
>>> dict -- pair of values -- key-value pairs
>>> user-defined datatypes -- classes -- python is object-oriented PL
>> v1 = 10 -- int
>> v2 = "Believer-01" -- string
>> v3 = 4.5 -- float
>> v4 = True -- boolean 
>> print(type(v1))
>> print(type(v2))
>> print(type(v3))
>> print(type(v4))

List in Python -- a group of data/variables
>> arr = []
>> print(type(arr))

>> arr = [1,2,4,6,5.6,3.4,'believer01','youtube']
>> print(arr)

>> arr = [1,2,4,6]
>> length_list = len(arr)
>> print(length_list)
>> print(type(arr))
>> print(len(arr))

>> arr = [5,2,4,9]
>> length_list = len(arr)
>> Important functionalities
>> print(5 in arr)  -- to check whether the set element is there in the list or not 
>> print(15 in arr) 
>> arr[0] -- for indexes
>> arr[3]
>> req_index = arr.index(4)
>> print(req_index)

>> arr.append(15)
>> arr.append(12)
>> print(arr)
>> print(max(arr))
>> print(min(arr))
>> print('Before sorting: ',end="")
>> print(arr)
>> arr.sort()
>> print('After sorting: ',end="")
>> print(arr)
>> arr.remove(9)
>> print(arr)

Tuple in Python -- immutable
t = (1,2,3,4) -- tuple
l = [1,2,3,4] -- list
>> print(type(t))
>> print(type(l))
>> l[0] = 10
>> print(l)
>> Important functions
>> print(len(t))
>> print(max(t))
>> print(min(t))
>> 




